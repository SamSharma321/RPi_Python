# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the enitre vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore
Python Source Files/Test Videos/test_20250124_191202.mp4
Python Source Files/Test Videos/test_20250124_191023.mp4
Python Source Files/Test Videos/test_20250124_190808.mp4
Python Source Files/Test Videos/test_20250124_185057.mp4
Python Source Files/Test Videos/test_20250123_222900.mp4
Python Source Files/Test Videos/test_20250123_222851.mp4
Python Source Files/Test Videos/test_20250123_222817.mp4
Python Source Files/Test Videos/test_20250123_222801.mp4
Python Source Files/Test Videos/test_20250123_222714.mp4
Python Source Files/Test Videos/test_20250119_215750.mp4
Python Source Files/Test Videos/test_20250119_153345.mp4
Python Source Files/Test Videos/test_20250119_152740.mp4
Python Source Files/Test Videos/test_20250119_151554.mp4
Python Source Files/Test Videos/test_20250119_151147.mp4
Python Source Files/Test Videos/test_20250119_151054.mp4
Python Source Files/Test Videos/test_20250119_150848.mp4
Python Source Files/Test Videos/test_20250119_150812.mp4
Python Source Files/Test Videos/test_20250119_150655.mp4
Python Source Files/Test Videos/test_20250119_150051.mp4
Python Source Files/Test Videos/test_20250119_145513.mp4
Python Source Files/Test Videos/test_20250119_145426.mp4
Python Source Files/Test Videos/test_20250119_145123.mp4
Python Source Files/Test Videos/test_20250119_145105.mp4
Python Source Files/Test Videos/test_20250119_103051.mp4
Python Source Files/Test Videos/test_20250119_102900.mp4
Python Source Files/Test Videos/test_20250119_102424.mp4
Python Source Files/Test Videos/test_20250119_102038.mp4
Python Source Files/Test Videos/test_20250119_101528.mp4
Python Source Files/Test Videos/test_20250119_101345.mp4
Python Source Files/Test Videos/test_20250119_101209.mp4
Python Source Files/Test Videos/test_20250119_100828.mp4
Python Source Files/Test Videos/test_20250119_094919.mp4
Python Source Files/Test Videos/test_20250119_094637.mp4
Python Source Files/Test Videos/test_20250119_094512.mp4
Python Source Files/Test Videos/test_20250119_094330.mp4
Python Source Files/Test Videos/test_20250119_094046.mp4
Python Source Files/Test Videos/test_20250119_093916.mp4
Python Source Files/Test Videos/test_20250119_093720.mp4
Python Source Files/Test Videos/test_20250119_093235.mp4
Python Source Files/Test Videos/test_20250119_093029.mp4
Python Source Files/Test Videos/test_20250119_093001.mp4
Python Source Files/Test Videos/test_20250119_092809.mp4
Python Source Files/Test Videos/test_20250119_092706.mp4
Python Source Files/Test Videos/test_20250119_092622.mp4
Python Source Files/Test Videos/test_20250119_092516.mp4
Python Source Files/Test Videos/test_20250119_092409.mp4
Python Source Files/Test Videos/test_20250119_090834.mp4
Python Source Files/Test Videos/test_20250119_090730.mp4
Python Source Files/Test Videos/test_20250119_090415.mp4
Python Source Files/Test Videos/test_20250119_090210.mp4
Python Source Files/Test Videos/test_20250119_090147.mp4
Python Source Files/Test Videos/test_20250119_085921.mp4
Python Source Files/Test Videos/test_20250119_085759.mp4
Python Source Files/Test Videos/test_20250119_085646.mp4
Python Source Files/Test Videos/test_20250119_085443.mp4
Python Source Files/Test Videos/test_20250119_085412.mp4
Python Source Files/Test Videos/test_20250119_085333.mp4
Python Source Files/Test Videos/test_20250119_085133.mp4
Python Source Files/Test Videos/test_20250118_201541.mp4
Python Source Files/Test Videos/test_20250118_201408.mp4
Python Source Files/Test Videos/test_20250118_201314.mp4
